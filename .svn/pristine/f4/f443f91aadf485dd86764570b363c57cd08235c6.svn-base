package com.ccx.models.main;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.ccx.models.api.ResourceApi;
import com.ccx.models.api.UserApi;
import com.ccx.models.base.BaseController;
import com.ccx.models.model.Module;
import com.ccx.models.model.PermissionBean;
import com.ccx.models.model.User;
import com.ccx.models.shiro.ShiroDbRealm;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.DisabledAccountException;
import org.apache.shiro.authc.ExcessiveAttemptsException;
import org.apache.shiro.authc.IncorrectCredentialsException;
import org.apache.shiro.authc.UnknownAccountException;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.subject.Subject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.ccx.models.util.ControllerUtil;
import com.ccx.models.util.EnumSysManage;
import com.ccx.models.util.HttpUtil;
import com.ccx.models.util.MD5;
import com.ccx.models.util.PropertiesUtil;
import com.ccx.models.util.RedisCacheUtil;
import com.ccx.models.util.StringUtils;
import com.ccx.models.util.UsedUtil;

/**
 * 
 * @description 登录控制
 * @author zxr
 * @data 2017年6月6日 下午5:55:32
 */
@Controller
public class LoginController extends BaseController {

	private static Logger logger = LogManager.getLogger(LoginController.class);
	
	// 中诚信信用风险管理平台 redis 前缀
	private final static String KEY_CCX_CREDITRISK_WEB_REG_SMS = "ABS:ccx_credit_risk:REG_SMS_";
	// 中诚信信用风险管理平台短信次数输入连续 错误 count 数值
	private static final Integer CREDITRISK_SENDSMS_SERIESERRCOUNT=Integer.parseInt(PropertiesUtil.getProperty("credit_risk_sendSms_SeriesErrcount"));
	// 中诚信信用风险管理平台消息提醒
	private final static String KEY_CCX_CREDITRISK_WEB_WARNMSG = "ABS:ccx_credit_risk:warnMsg:moduleName";
	
	@Autowired
	private UserApi userApi;
	
	@Autowired
	private ResourceApi resourceApi;

	@Autowired
	private ShiroDbRealm dbRealm;
	

	/*@Autowired
	private CommonGainReport commonGainReport;

	@Autowired
    private CommonGainReportValue commonGainReportValue;*/

	//@Autowired
	//private ModelDataMannager modelDataMannager;
	/**
	 * 首页
	 *
	 * @return
	 */
	@GetMapping("/")
	public String index() {
		logger.info("已经登录，去主页");
		return "redirect:/index";
	}

	/**
	 * 首页
	 *
	 * @param model
	 * @return
	 */
	@GetMapping("/index")
	public String index(Model model) {
		return "index";
	}

	/**
	 * get方式请求登录
	 * @return
	 */
	@GetMapping("/login")
	public String login() {
       /* System.out.println("===============//根据类型查询模板数据包，用List来封装多个子表信息=======================");
		System.out.println(JsonUtils.toJson(commonGainReport.getModles(7)));//查询模板数据表
        System.out.println("===============//根据子表id查询 子表属性，用Map封装，以子表的各种属性作为map的Key=======================");
        System.out.println(JsonUtils.toJson(commonGainReport.getModleFieldBySheetId(1, CommonGainReport.MapKeyEnum.FIELD_NAME)));
        System.out.println("================//根据类型+子表名称查 子表属性，用Map封装，以子表的各种属性作为map的Key======================");
        System.out.println(JsonUtils.toJson(commonGainReport.getModleFieldBySheetId(1,"资产类数据", CommonGainReport.MapKeyEnum.FIELD_EXCLE_NAME)));

        System.out.println("============获取评级数据基础包==================");
        System.out.println(JsonUtils.toJson(commonGainReportValue.getBaseValue(101)));

        System.out.println("============根据reportId+（子表id/子表名称/子表的顺序）获取子表数据基础包map(map的key可以 以多种形式返回)==================");
        System.out.println(JsonUtils.toJson(commonGainReportValue.getSheetValue(101,CommonGainReportValue.SheetKeyEnum.SHEET_NAME,"资产类数据", CommonGainReportValue.MapKeyEnum.FIELD_NAME)));
        System.out.println("============根据reportId+（子表id/子表名称/子表的顺序）获取子表数据基础包map(map的key可以 以多种形式返回)==================");
        System.out.println(JsonUtils.toJson(commonGainReportValue.getSheetValueOther(101,CommonGainReportValue.SheetKeyEnum.SHEET_NAME,"资产类数据", CommonGainReportValue.SpecialKeyEnum.FIELD_NAME)));
        System.out.println(JsonUtils.toJson(commonGainReportValue.getSheetValueOther(101,CommonGainReportValue.SheetKeyEnum.SHEET_ID,"1", CommonGainReportValue.SpecialKeyEnum.FIELD_EXCLE_NAME)));
        System.out.println(JsonUtils.toJson(commonGainReportValue.getSheetValueOther(101,CommonGainReportValue.SheetKeyEnum.SHEET_NAME,"资产类数据", CommonGainReportValue.SpecialKeyEnum.FIELD_ID)));
*/

        logger.info("get请求登录：初始请求");
		if (SecurityUtils.getSubject().isAuthenticated()) {
			return "redirect:/index";
		}
		return "login";
	}

	/**
	 * POST 登录 shiro
	 *
	 * @param username
	 *            用户名
	 * @param password
	 *            密码
	 * @return {Object}
	 */
	@PostMapping("/checkLogin")
	@ResponseBody
	public Map<String, String> checkLogin(HttpServletRequest request, HttpServletResponse response,
			@RequestParam("username") String username, 
			@RequestParam("password") String password,
			@RequestParam("mobileCode") String mobileCode) {
		Map<String, String> map = new HashMap<>();
		String result = "请求异常";
		// 改为全部抛出异常，避免ajax,token被刷新
		if (StringUtils.isNotBlank(username) && StringUtils.isNotBlank(password)) {
			User userbean = userApi.getUserByName(username);
			//request.getSession().setAttribute("thisIstitutionId", userbean.getInstitutionId());
			User newUserBean = new User();
			//得到主体
			Subject subject = SecurityUtils.getSubject();
			try {
				dbRealm.clearAuthenticationInfo();
				password = MD5.encryption(password);
				// 获取用户凭证信息
				UsernamePasswordToken token = new UsernamePasswordToken(username, password);
				// "已记住"和"已认证"是有区别的,并非是认证通过的用户
				token.setRememberMe(true);
				try {
					//先进行图片验证码验证======图片验证码取消
//					String verCode = (String) request.getSession().getAttribute("verCode");//系统生成的验证码
//					if(null == verifyCode || "" == verifyCode){
//						map.put("result", "请输入图片验证码！");
//						return map;
//					}
//					verifyCode = verifyCode.toLowerCase();
//					if(verifyCode != verCode && !verifyCode.equals(verCode) ){
//						map.put("result", "图片验证码输入有误！");
//						return map;
//					}
					
					//登录验证成功
					//验证登录ip
					//获取登录ip
					String loginIp = HttpUtil.getIpAddr(request);
					logger.info("============当前登录IP:"+loginIp);
					//校验登录ip是否存在于数据库，如果不存在，不准登入。
					//机构id
					long insId =  userbean.getInstitutionId();
					//int ipPermit = ipApi.checkIP(loginIp,insId);
					//ipPermit=1;
					if(true){
						//如果当前登录ip不再数据库，则必须进行短信验证；
						//先进行手机验证码验证
						// 短信验证码验证
						if(UsedUtil.isNotNull(mobileCode)){
							String mobilephone = userbean.getPhone();
							String mobileloginName = userbean.getLoginName();
							String smsRedisKey = KEY_CCX_CREDITRISK_WEB_REG_SMS+mobileloginName+":"+mobilephone;;
							Integer failMillisecond = 1000 * 60 * 1;//1分钟
							String resCode = null;
							if (!resCode.equals(EnumSysManage.SUCCESS.getCode())) {
								map.put("result", "短信验证码超时或不正确!");
								return map;
							}
						}else{
							map.put("resultCode", "needCode");
							map.put("result", "您的IP不在访问范围内，请输入短信验证码后登录!");
							return map;
						}
					}
					
					if(userbean.getIsDel() == 1){
						map.put("result", "该用户已注销!");
						return map;
					}else{
						if(userbean.getStatus()==1){
							map.put("result", "该用户已停用!");
							return map;
						}else if(userbean.getStatus()==2){
							map.put("result", "该用户已锁定!");
							return map;
						}
					}
					
					//验证成功且该用户正常使用，则开始验证该用户所拥有的模块是否开始使用以及使用状态，
					//所有模块未开始使用不允许登录，所有模块全部过期不允许登录 
					List<Module> userModuleList = new ArrayList<Module>();
			       	if(UsedUtil.isNotNull(insId)){
			       	    //获取后台给机构分配的模块
			       		userModuleList = userApi.getMyCanUseModuleByInsId(insId,userbean.getId());
			       	}
			       	userModuleList = userModuleList==null?new ArrayList<Module>():userModuleList;
			       	
			       	//检验模块是否全部过期，如果全部过期或者全部未开始则不允许登录
			       	boolean moduleOverdueOrWeiStart = checkModuleIsOverdue(userModuleList);
			       	if (moduleOverdueOrWeiStart) {
						map.put("result", "模块未开通或已到期，请联系管理员！");
						return map;
					}
			       	
					//登录验证
					subject.login(token);
					//验证是否登录成功
					if(subject.isAuthenticated()){
						
						//验证成功且该用户正常使用，则执行以下操作
						List<Module> moduleList = new ArrayList<Module>();
				       	if(UsedUtil.isNotNull(insId)){
				       	  //获取后台给机构分配的并且当前用户有权限使用的模块
				          moduleList = userApi.getMyModuleByInsId(insId,userbean.getId());
				       	}
				        moduleList = moduleList==null?new ArrayList<Module>():moduleList;
				        
				        //执行消息提醒操作
						warnMessage(moduleList,userbean,request);
				        
						//登录成功后将登录错误次数重置为0
						newUserBean.setId(userbean.getId());
						newUserBean.setLoginNum(0);
						newUserBean.setLoginTime(new Date());
						userApi.updateTO(newUserBean);
						
						map.put("result", "1");
						//用户信息放入session
						request.getSession().setAttribute("risk_crm_user", userbean);
						//机构所拥有模块信息放入session
						request.getSession().setAttribute("user_m_moduleList", moduleList);
						
					}else{
						token.clear();
					}
				} catch (UnknownAccountException e) {
					result = "账号不存在！";
					throw new RuntimeException("账号不存在！", e);
				} catch (DisabledAccountException e) {
					result = "账号未启用！";
					throw new RuntimeException("账号未启用或被锁定！", e);
				} catch (ExcessiveAttemptsException e) {
//						System.err.println("000000000000000000000000000000");
//						result = "密码输入错误5次以上,账号被锁定！请联系管理员";
//						userApi.lockUser(userbean.getId());
					throw new RuntimeException("账号被锁定！", e);
				} catch (IncorrectCredentialsException e) {
					int loginNum = userbean.getLoginNum();
					//密码输错超过五次将被锁定，即第六次会被锁定
					if(loginNum>=5){
						loginNum += 1;
						newUserBean.setId(userbean.getId());
						newUserBean.setStatus(2);
						newUserBean.setLoginNum(loginNum);
						newUserBean.setLoginTime(new Date());
						userApi.updateTO(newUserBean);
						result = "密码输入错误5次以上,账号被锁定！请联系管理员!";
						throw new RuntimeException("密码错误！", e);
					}else if(loginNum<5){
						loginNum += 1;
						newUserBean.setId(userbean.getId());
						newUserBean.setLoginNum(loginNum);
						newUserBean.setLoginTime(new Date());
						userApi.updateTO(newUserBean);
						result = "密码错误,再错"+(6-loginNum)+"次将被锁定!";
						throw new RuntimeException("密码错误！", e);
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
				map.put("result", result);
			}
		} else {
			map.put("result", "用户名或密码不能空！");
		}
		return map;
	}

	/**
	 * 未授权
	 * 
	 * @return {String}
	 */
	@GetMapping("/unauth")
	public String unauth() {
		if (SecurityUtils.getSubject().isAuthenticated() == false) {
			return "redirect:/login";
		}
		return "unauth";
	}

	/**
	 * 退出
	 * 
	 * @return {Result}
	 */
	@PostMapping("/logout")
	@ResponseBody
	public Map<String,String> logout(HttpServletRequest request) {
		Map<String,String> map=new HashMap<>();
		logger.info("登出");
		try {
			Subject subject = SecurityUtils.getSubject();
			request.getSession().removeAttribute("menuIndex1");//左侧菜单定位
			request.getSession().removeAttribute("menuIndex2");//左侧菜单定位
			request.getSession().removeAttribute("risk_crm_user");//用户信息
			subject.logout();
			map.put("rsCode","0000");
		} catch (Exception e) {
			map.put("rsCode","9999");
			e.printStackTrace();
		}
		return  map;
	}
	
	/**
	 * 
	 * @Title: getLeftNavigation  
	 * @author: WXN
	 * @Description: 根据模块获取左侧导航栏 
	 * @param: @param request
	 * @param: @return      
	 * @return: String      
	 * @throws
	 */
	@ResponseBody
    @RequestMapping(value="/getLeftNavigation", method=RequestMethod.POST,produces = "application/json; charset=utf-8")  
    public String getLeftNavigation(HttpServletRequest request){
    	//获取请求参数
    	Map<String,Object> map = ControllerUtil.requestMap(request);
    	String userId = (String)map.get("userId");
    	String myselfId = (String)map.get("myselfId");
    	if(UsedUtil.isNotNull(userId)&&UsedUtil.isNotNull(myselfId)){
    		Map<String,Object> params = new HashMap<String,Object>();
    		params.put("userId", Integer.parseInt(userId.trim()));
    		params.put("myselfId", myselfId.trim());
    		//查询左侧导航栏 
    		List<PermissionBean> result = resourceApi.getLeftNavigation(params);
        	return JSON.toJSONString(result);
    	}
		return null;
    }
	
	@SuppressWarnings("unchecked")
	@PostMapping("/getWarnMsg")
	@ResponseBody
    public Map<String,Object> getWarnMsg(HttpServletRequest request){
		Map<String,Object> map = new HashMap<String,Object>();
		List<Map<String, Object>> resultList = null;
		try {
			resultList = (List<Map<String, Object>>) RedisCacheUtil.getRedis(KEY_CCX_CREDITRISK_WEB_WARNMSG);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("warnMsgList", resultList);
		return map;
    }
	
	//检验模块是否到期
	public boolean checkModuleIsOverdue(List<Module> userModuleList){
		//初始化变量  全部到期或者全部未开始
		boolean result = true;
		try {
			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");//设置日期格式
		    String currentDate = df.format(new Date());
			if(null != userModuleList && userModuleList.size()>0){
	        	for (int i = 0; i < userModuleList.size(); i++) {
	        		String endDate = userModuleList.get(i).getEndDate();
	        		String startDate = userModuleList.get(i).getStartDate();
	        		Date sDate = df.parse(startDate);
	        		Date oDate = df.parse(endDate);
	        		Date fDate = df.parse(currentDate);
	        		int odays = daysOfTwo(oDate, fDate);
	        		int sdays = daysOfTwo(sDate, fDate);
	        		//如果有一个模块处于正常使用，则result = false
	        		if(odays>=0 && sdays<=0){
	        			result = false;
	        		}
	        	}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
	
	
	//消息操作
	public void warnMessage(List<Module> moduleList, User userbean,HttpServletRequest request) throws Exception {
		//先清除redis的消息缓存，在根据登陆人是否需要消息提醒进行提示
		RedisCacheUtil.delete(KEY_CCX_CREDITRISK_WEB_WARNMSG);
		//定义新的list集合，存储结果集
        List<Map<String, Object>> resultList = new ArrayList<Map<String, Object>>();
		try {
			//判断模块是否距离到期还有15天，如果在15天内开始提示
	        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");//设置日期格式
	        String currentDate = df.format(new Date());
	        boolean dateFlag = false;
	        Map<String, Object> resultMap = null;
	        if(null != moduleList && moduleList.size()>0){
	        	for (int i = 0; i < moduleList.size(); i++) {
	        		String endDate = moduleList.get(i).getEndDate();
	        		Date fDate = df.parse(currentDate);
	        		Date oDate = df.parse(endDate);
	        		int days = daysOfTwo(oDate, fDate);
	        		//距离到期时间15天内进行提醒操作
	        		if(days>=0 && days <=15){
	        			dateFlag = true;
	        			resultMap = new HashMap<String, Object>();
        				resultMap.put("moduleName", moduleList.get(i).getName());
        				resultMap.put("moduleDays", days);
        				resultList.add(resultMap);
	        		}
				}
	        }
	        //有模块需要提醒时，在看当前登陆人是否需要提醒
	        if(dateFlag){
	        	System.err.println("前台消息提醒============="+resultList);
		        //查询是否当天已经提醒过
				int warnFlag = userbean.getWarnFlag();
				Date warnTime1 = userbean.getWarnTime();
				String warnTime = "";
				if(null != warnTime1){
					warnTime = df.format(userbean.getWarnTime());
				}
				//如果上次提醒时间为空且标识为0，说明此次为第一次提醒
				if(!UsedUtil.isNotNull(warnTime) && 0==warnFlag){
					//放入缓存
					RedisCacheUtil.setRedis(KEY_CCX_CREDITRISK_WEB_WARNMSG, resultList);
					request.getSession().setAttribute("isNeedWarnFlag", "need");
					//更新userbean warnFlag=1 warnTime=当前时间
					User user = new User();
					user.setId(userbean.getId());
					user.setWarnFlag(1);
					user.setWarnTime(new Date());
					userApi.updateTO(user) ;
				}else{
					//如果上次提醒时间为空，那么判断提醒时间是否时当天
					//如果上次提醒时间不为空，说明以前有过提示，则判断时间与标识
					if(warnTime != currentDate && !warnTime.equals(currentDate) && 1 == warnFlag){
						//放入缓存
						RedisCacheUtil.setRedis(KEY_CCX_CREDITRISK_WEB_WARNMSG, resultList);
						request.getSession().setAttribute("isNeedWarnFlag", "need");	
						//更新userbean warnFlag=1 warnTime=当前时间
						User user = new User();
						user.setId(userbean.getId());
						user.setWarnFlag(1);
						user.setWarnTime(new Date());
						userApi.updateTO(user);
					}else{
						//放入缓存
						RedisCacheUtil.setRedis(KEY_CCX_CREDITRISK_WEB_WARNMSG, "");
						request.getSession().setAttribute("isNeedWarnFlag", "noNeed");
					}
				}
	        }else{
				//放入缓存
				RedisCacheUtil.setRedis(KEY_CCX_CREDITRISK_WEB_WARNMSG, "");
				request.getSession().setAttribute("isNeedWarnFlag", "noNeed");
			}
		} catch (Exception e) {
			//放入缓存
			RedisCacheUtil.setRedis(KEY_CCX_CREDITRISK_WEB_WARNMSG, "");
			request.getSession().setAttribute("isNeedWarnFlag", "noNeed");
			e.printStackTrace();
		}
    }
		
		
	//计算日期相差天数
	public static int daysOfTwo(Date startDate, Date endDate) {
		if (startDate == null || endDate == null){
			return 0;
		}
		long baseNum = 3600 * 1000 * 24;
		long chashu = startDate.getTime() - endDate.getTime();
		if (chashu<0){
			return -1;
		}
		long absNum = Math.abs(chashu);
		if(absNum<0){
			return 0;
		}
//		long mod = absNum % baseNum;
		int num = (int) (absNum / baseNum);
//		if (mod > 0)
//			num++;
		return num;
    }
	
	/**
	 * 获取验证码
	 * 
	 * @return {Result}
	 */
	@RequestMapping(value="/getVerifyCode",method=RequestMethod.POST)
	@ResponseBody
	public String getVerifyCode(HttpServletRequest request) {
		String verifyCode = request.getParameter("verifyCode");//前台输入的验证码
		String verCode = (String) request.getSession().getAttribute("verCode");//系统生成的验证码
		String result = "notNull";
		if(null == verifyCode || "" == verifyCode){
			result = "notNull";
		}else {
			verifyCode = verifyCode.toLowerCase();
			if(verifyCode == verCode || verifyCode.equals(verCode) ){
				result = "pass";
			}else if(verifyCode != verCode && !verifyCode.equals(verCode) ){
				result = "notSame";
			}
		}
		return result;
	}
	
	/**
	 * 验证手机验证码
	 * 
	 * @return {Result}
	 */
	@RequestMapping(value="/checkVerifyCode",method=RequestMethod.POST)
	@ResponseBody
	public Map<String,Object> checkVerifyCode(HttpServletRequest request) {
		String mobileCode = request.getParameter("mobileCode");//前台输入的手机验证码
		// 短信验证码验证
		User user = ControllerUtil.getSessionUser(request);
		String phone = user.getPhone();
		String loginName = user.getLoginName();
		String smsRedisKey = KEY_CCX_CREDITRISK_WEB_REG_SMS+loginName+":"+phone;;
		Integer failMillisecond = 1000 * 60 * 5;
		String resCode = null;
		Map<String,Object> resultMap = new HashMap<String,Object>();
		if (!resCode.equals(EnumSysManage.SUCCESS.getCode())) {
			resultMap.put("code", EnumSysManage.FAILE.getCode());
			resultMap.put("msg", "短信验证码超时或不正确");
			return resultMap;
		}
		return resultMap;
	}
}
