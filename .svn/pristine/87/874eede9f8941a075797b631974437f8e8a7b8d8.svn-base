package com.ccx.models.service.impl.dataexchange.impl;

import com.ccx.models.bean.RecivePutOutBean;
import com.ccx.models.manager.HttpDataExchangeManager;
import com.ccx.models.mapper.*;
import com.ccx.models.mapper.datafile.ModelsDataFileMapper;
import com.ccx.models.model.*;
import com.ccx.models.model.datafile.ModelsFileIvTopn;
import com.ccx.models.service.impl.dataexchange.PutOutExchangeService;
import com.ccx.models.util.CSVUtil;
import com.ccx.models.util.JsonUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.util.*;

import static com.ccx.models.manager.HttpDataExchangeManager.*;

/**
 * @Description:数据交换-模型输出
 * @author:lilong
 * @Date: 2017/11/22
 */
@Service
public class PutOutExchangeServiceImpl implements PutOutExchangeService {

    @Autowired
    HttpDataExchangeManager httpDataExchangeManager;

    @Autowired
    ModelsModelDataAnalyInfoMapper modelsModelDataAnalyInfoMapper;
    @Autowired
    ModelsModelDataEvaluateIndexMapper modelsModelDataEvaluateIndexMapper;
    @Autowired
    ModelsScoreGroupStatisticsMapper modelsScoreGroupStatisticsMapper;
    @Autowired
    private ModelsDataFileMapper modelsDataFileMapper;
    @Autowired
    private ModelsTrainLine2Mapper modelsTrainLine2Mapper;
    @Autowired
    private ModelsTrainLine3Mapper modelsTrainLine3Mapper;
    @Autowired
    private ModelsTrainLine4Mapper modelsTrainLine4Mapper;
    @Autowired
    private ModelsTrainLine1Mapper modelsTrainLine1Mapper;
    @Autowired
    private ModelsProgramMapper modelsProgramMapper;
    @Autowired
    private ModelsOutputPathMapper modelsOutputPathMapper;
    @Autowired
    private ModelsFileIvPutoutTopnMapper modelsFileIvPutoutTopnMapper;
    @Autowired
    private ModelsImportantCountMapper modelsImportantCountMapper;

    /**
     * 发送模型请求给模型组 （异步请求，请求获取模型输出所有信息）
     * @param program
     * @return
     */
    @Override
    public Map<String,Object> sendTOModel(ModelsProgram program){
        Map<String,Object> map=new HashMap<>();
        if(program==null) {
            map.put("rsCode","10000");
            map.put("rsMsg","参数有误");
            return  map;
        }
       String res=httpDataExchangeManager.sendMsgToModel(modelsDataFileMapper.selectByPrimaryKey(program.getDataFileId()),program);
        if("".equals(res)){
            map.put("rsCode","0000");
            map.put("rsMsg","成功");
            return map;
        }
        map.put("rsCode","9999");
        map.put("rsMsg","系统异常");
        return  map;
    }

    /**
     * 保存模型输出信息
     * @param bean
     */
    @Override
    public void saveOutPut(String bean){
        RecivePutOutBean putOutBean=null;
        try{
            System.out.println("bean:::::"+bean);
            final Map map=JsonUtils.fromJson(bean,Map.class);
            putOutBean= JsonUtils.fromJson(bean,RecivePutOutBean.class);
            //项目Id
            Integer programId=Integer.valueOf(putOutBean.getReqId().split("-")[1]);
            String sf=putOutBean.getReqId().split("-")[0];
            ModelsProgram program=modelsProgramMapper.selectByPrimaryKey(programId);
            //算法id
            Integer arithmeticId=Integer.valueOf(program.getArithmeticIds().split(",")[getSfId(program.getArithmeticNames(),sf)]);
            String creator=program.getCreator();

            //重要变量分析
             List<ModelsImportantCount> importantCounts=putOutBean.getVariableAnalysis().getModelsImportantCount(program.getDataFileId().longValue(),programId,arithmeticId);
            //模型输出topN变量与目标变量关系表格路径
            String topNpath=putOutBean.getVariableAnalysis().getTopNpath();
            List<ModelsFileIvPutoutTopn> topnList =getModelsFileIvPutoutTopn(topNpath,program.getDataFileId(),programId,arithmeticId);


            //模型的数据概览
            List<ModelsModelDataAnalyInfo> analyInfos=putOutBean.getModelOutput().getModelsModelDataAnalyInfo(programId,arithmeticId,creator);

            //模型评价指标报告
            List<ModelsModelDataEvaluateIndex> indexList=putOutBean.getModelOutput(). getModelsModelDataEvaluateIndex(programId,arithmeticId,creator);

            //KS,AUC
            List<ModelsTrainLine1> trainKSlist=getModelsTrainLine1(putOutBean.getModelOutput().getAucksPlot().getTrainKSpath(),programId,arithmeticId,creator);//训练集KS指标
            List<ModelsTrainLine2> trainAUClist=getModelsTrainLine2(putOutBean.getModelOutput().getAucksPlot().getTrainAUCpath(),programId,arithmeticId,creator);//训练集AUC指标
            List<ModelsTrainLine3> testKSlist=getModelsTrainLine3(putOutBean.getModelOutput().getAucksPlot().getTestKSpath(),programId,arithmeticId,creator);//测试集KS指标
            List<ModelsTrainLine4> testAUClist=getModelsTrainLine4(putOutBean.getModelOutput().getAucksPlot().getTestAUCpath(),programId,arithmeticId,creator);//训练集AUC指标

            //概率分析报告
            List<ModelsScoreGroupStatistics> scoreGroupStatistics=putOutBean.getModelOutput().getModelsModelsScoreGroupStatistics(programId,arithmeticId,creator);
            System.out.println(putOutBean);

            String  predictResPath=putOutBean.getOtherOutput().getPredictResPath();//				所有数据预测概率文件路径
            String  logPath=putOutBean.getOtherOutput().getLogPath();//				分析过程的日志文件路径
            String  analysisReport=putOutBean.getOtherOutput().getAnalysisReport();//				分析结果的Excel表格下载路径

            //数据存储
            save(Arrays.asList(analyInfos,indexList,
                            getLists(trainKSlist),
                            getLists(trainAUClist),
                            getLists(testKSlist),
                            getLists(testAUClist),
                            scoreGroupStatistics,
                            importantCounts,
                            topnList
                            ),
                 Arrays.<BaseMapper>asList(modelsModelDataAnalyInfoMapper,
                            modelsModelDataEvaluateIndexMapper,
                            modelsTrainLine1Mapper,
                            modelsTrainLine2Mapper,
                            modelsTrainLine3Mapper,
                            modelsTrainLine4Mapper,
                            modelsScoreGroupStatisticsMapper,
                            modelsImportantCountMapper,
                            modelsFileIvPutoutTopnMapper
                           ));

            //生成文件路径存储
            modelsOutputPathMapper.insert(new ModelsOutputPath(programId.longValue(),arithmeticId.longValue(),logPath,predictResPath,analysisReport));
            ModelsProgram np=new ModelsProgram(program.getId(),new Date(),getTime(program.getCreateTime()),(short)2);
            //修改状态
            modelsProgramMapper.updateByPrimaryKey(np);
        }catch (Exception e){
            e.printStackTrace();
            new RuntimeException("数据存储失败"+e.getMessage());
        }
    }
    //数据存储
    private void save(List datas, List<BaseMapper> mappers){
        Save<Object, BaseMapper> save= new Save<Object, BaseMapper>() {
            @Override
            public void insert(Object info, BaseMapper mapper) {
                mapper.insert(info);
            }
        };
        for (int i = 0; i <datas.size() ; i++) {
           if(datas.get(i) instanceof List){
               save.insertBatch((List<Object>) datas.get(i),mappers.get(i));
           }else {
               save.insert(datas.get(i),mappers.get(i));
           }
        }
    }

    //topN变量与目标变量关系
    private static List<ModelsFileIvPutoutTopn> getModelsFileIvPutoutTopn(String path, Integer datafileId,Integer programId,Integer arithmeticId){
        List<String[]> list= CSVUtil.read(path);
        List<ModelsFileIvPutoutTopn> li=new ArrayList<>();
        for (int i = 1; i <list.size() ; i++) {
        /*    li.add(new ModelsFileIvTopn(null,fileId.longValue(),list.get(i)[5],list.get(i)[0],
                    list.get(i)[1]==null?null:Integer.valueOf(list.get(i)[1]),
                    list.get(i)[2]==null?null:Integer.valueOf(list.get(i)[2]),
                    list.get(i)[3]==null?null:Integer.valueOf(list.get(i)[3]),
                    list.get(i)[4]==null?null:(list.get(i)[4].contains("%")?
                            new BigDecimal(list.get(i)[4].replace("%",""))
                            :new BigDecimal(list.get(i)[4]))));*/
            li.add(new ModelsFileIvPutoutTopn(datafileId.longValue(),programId.longValue(),arithmeticId.longValue(),
                    list.get(i)[1],list.get(i)[2],
                    list.get(i)[3]==null?null:Integer.valueOf(list.get(i)[3]),
                    list.get(i)[4]==null?null:Integer.valueOf(list.get(i)[4]),
                    list.get(i)[5]==null?null:Integer.valueOf(list.get(i)[5]),
                    list.get(i)[6]==null?null:new BigDecimal(list.get(i)[6]),
                    list.get(i)[7]==null?null:new BigDecimal(list.get(i)[7]),
                    list.get(i)[8]==null?null:new BigDecimal(list.get(i)[8]),
                    list.get(i)[9]==null?null:new BigDecimal(list.get(i)[9]),
                    list.get(i)[10],
                    list.get(i)[11]==null?null:new BigDecimal(list.get(i)[9]),
                    list.get(i)[12],
                    Integer.valueOf(list.get(i)[0])));
        }
        return li;
    }
  /*  //数据存储
    private void save( List<ModelsModelDataAnalyInfo> analyInfos,
                       List<ModelsModelDataEvaluateIndex> indexList,
                       List<ModelsScoreGroupStatistics> scoreGroupStatistics,
                        List<ModelsTrainLine1> trainKSlist,
                       List<ModelsTrainLine2> trainAUClist,
                       List<ModelsTrainLine3> testKSlist,
                       List<ModelsTrainLine4> testAUClist){

        new Save<ModelsModelDataAnalyInfo,ModelsModelDataAnalyInfoMapper>(){
            @Override
            public void insert(ModelsModelDataAnalyInfo info, ModelsModelDataAnalyInfoMapper mapper) {
                mapper.insert(info);
            }
        }.insertBatch(analyInfos,modelsModelDataAnalyInfoMapper);

        new Save<ModelsModelDataEvaluateIndex,ModelsModelDataEvaluateIndexMapper>(){
            @Override
            public void insert(ModelsModelDataEvaluateIndex info, ModelsModelDataEvaluateIndexMapper mapper) {
                mapper.insert(info);
            }
        }.insertBatch(indexList,modelsModelDataEvaluateIndexMapper);

        new Save<ModelsScoreGroupStatistics, ModelsScoreGroupStatisticsMapper>() {
            @Override
            public void insert(ModelsScoreGroupStatistics info, ModelsScoreGroupStatisticsMapper mapper) {
                mapper.insert(info);
            }
        }.insertBatch(scoreGroupStatistics,modelsScoreGroupStatisticsMapper);
    }
*/
    //ModelsTrainLine1
    private  List<ModelsTrainLine1> getModelsTrainLine1(String path, Integer fileId,Integer arithmeticId,String userName){
        List<String[]> list= CSVUtil.read(path);
        List<ModelsTrainLine1> li=new ArrayList<>();
        for (int i = 1; i <list.size() ; i++) {
            li.add(new ModelsTrainLine1(fileId.longValue(),arithmeticId.longValue(),
                    getBigDecimal(list.get(i)[0]),
                    getBigDecimal(list.get(i)[1]),
                    getBigDecimal(list.get(i)[2]),
                    getBigDecimal(list.get(i)[3]),
                    userName,new Date()));
        }
        return li;
    }
    //ModelsTrainLine2
    private  List<ModelsTrainLine2> getModelsTrainLine2(String path, Integer fileId,Integer arithmeticId,String userName){
        List<String[]> list= CSVUtil.read(path);
        List<ModelsTrainLine2> li=new ArrayList<>();
        for (int i = 1; i <list.size() ; i++) {
            li.add(new ModelsTrainLine2(fileId.longValue(),arithmeticId.longValue(),
                    getBigDecimal(list.get(i)[0]),
                    getBigDecimal(list.get(i)[1]),
                    userName,new Date()));
        }
        return li;
    }
    //ModelsTrainLine3
    private  List<ModelsTrainLine3> getModelsTrainLine3(String path, Integer fileId,Integer arithmeticId,String userName){
        List<String[]> list= CSVUtil.read(path);
        List<ModelsTrainLine3> li=new ArrayList<>();
        for (int i = 1; i <list.size() ; i++) {
            li.add(new ModelsTrainLine3(fileId.longValue(),arithmeticId.longValue(),
                    getBigDecimal(list.get(i)[0]),
                    getBigDecimal(list.get(i)[1]),
                    getBigDecimal(list.get(i)[2]),
                    getBigDecimal(list.get(i)[3]),
                    userName,new Date()));
        }
        return li;
    }
    //ModelsTrainLine4
    private  List<ModelsTrainLine4> getModelsTrainLine4(String path, Integer fileId,Integer arithmeticId,String userName){
        List<String[]> list= CSVUtil.read(path);
        List<ModelsTrainLine4> li=new ArrayList<>();
        for (int i = 1; i <list.size() ; i++) {
            li.add(new ModelsTrainLine4(fileId.longValue(),arithmeticId.longValue(),
                    getBigDecimal(list.get(i)[0]),
                    getBigDecimal(list.get(i)[1]),
                    userName,new Date()));
        }
        return li;
    }
    private static BigDecimal getBigDecimal(Object o){
        if(o==null) return  null;
        if(o.toString().indexOf("e")>0){
            String[] data=o.toString().split("e");
            if(data[1].startsWith("-")){
                return new BigDecimal(data[0]).divide(new BigDecimal(Math.pow(10,Double.valueOf(data[1].substring(1)))));
            }else{
                return new BigDecimal(data[0]).multiply(new BigDecimal(Math.pow(10,Double.valueOf(data[1]))));
            }
        }
        return new BigDecimal(o.toString());
    }
    //获取算法id
    private Integer getSfId(String sfs,String sf){
        String[] st =sfs.split(",");
        for (int i = 0; i <st.length ; i++) {
            if(st[i].toLowerCase().equals(sf.toLowerCase())){
                return i;
            }
        }
        return null;
    }

    //从大的list里面拆成多个List

    public  <E>List<List<E>>  getLists(List<E> list){
        int index=200;
        int c=list.size()/index+(list.size()%index==0?0:1);
        List<List<E>> res=new ArrayList<>();
        for (int i = 0; i <c ; i++) {
            List<E> es = list.subList(i*index,(i+1)*index>(list.size())?list.size():(i+1)*index);
            res.add(es);
        }
        return res;
    }
    public String getTime(Date d){
        long min= System.currentTimeMillis()-d.getTime()/1000l*60;
        return min/60+"小时"+min%60+"分";
    }
}
