package com.ccx.models.service.impl.dataexchange;

import com.ccx.models.Constants;
import com.ccx.models.api.dataexchange.ModelExtractService;
import com.ccx.models.api.dataexchange.VariableExchangeService;
import com.ccx.models.bean.*;
import com.ccx.models.manager.HttpDataExchangeManager;
import com.ccx.models.mapper.*;
import com.ccx.models.mapper.dataexchange.DataExchangeMapper;
import com.ccx.models.mapper.datafile.ModelsDataFileMapper;
import com.ccx.models.mapper.datafile.ModelsFileIvTopnMapper;
import com.ccx.models.message.MsgPush;
import com.ccx.models.model.*;
import com.ccx.models.model.datafile.ModelsDataFile;
import com.ccx.models.model.datafile.ModelsFileIvTopn;
import com.ccx.models.util.CSVUtil;
import com.ccx.models.util.JsonUtils;
import com.ccx.models.util.StringUtils;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @Description: 数据交换-变量、iv值及重要变量展示
 * @author:lilong
 * @Date: 2017/11/22
 */
@Service("VariableExchangeApi")
public class MoldelExtractServiceImpl implements ModelExtractService {

    Logger logger = org.apache.logging.log4j.LogManager.getLogger(this.getClass());

    @Autowired
    private HttpDataExchangeManager httpDataExchangeManager;

    @Autowired
    private ModelsExtractInfoMapper modelsExtractInfoMapper;

    @Autowired
    private  ModelsOutputPathMapper modelsOutputPathMapper;
    @Autowired
    private ModelsDataFileMapper modelsDataFileMapper;
    @Autowired
    private ModelsProgramMapper modelsProgramMapper;

    @Autowired
    private DataExchangeMapper dataExchangeMapper;

    @Autowired
    private ModelsExtractTargetValueMapper modelsExtractTargetValueMapper;

    @Autowired
    private MsgPush push;

    /**
     *
     * @param file 预测模型信息
     * @param userName
     * @return
     */
    @Override
    public Map<String, Object> saveForModelSend(ModelsExtractTestRecord file, String userName) {


        ////////////////////
        Map<String,Object> map=new HashMap<>();
        if(file==null) {
            map.put("rsCode","10000");
            map.put("rsMsg","参数有误");
            return  map;
        }
        Long fileId=file.getId();
        try{
            //提取模型信息
            ModelsExtractInfo info=modelsExtractInfoMapper.selectByPrimaryKey(file.getModelsExtractInfoId());
            ModelsOutputPath outputPath= modelsOutputPathMapper.getModelOutputPath(info.getProgramId(),info.getArithmeticId());
            String reqId=new StringBuilder(fileId.toString()).append("-").append(System.currentTimeMillis()).toString();

            ModelsDataFile dataFile= modelsDataFileMapper.selectByPrimaryKey(info.getDataFileId().intValue());
            Base base = new Base(file.getId().intValue(),file.getFileName(),null,outputPath.getRequstId().split("-")[0]);
            ExtractOutBean outBean=new ExtractOutBean(reqId,outputPath.getRequstId(),outputPath.getModelPath(),base);
            //获取http请求数据
            String bean= httpDataExchangeManager.sendMsgToModel(dataFile,modelsProgramMapper.selectByPrimaryKey(info.getProgramId().intValue()),outBean,file.getFilePath());
            bean=bean.replace("//10.0.5.136/","d:/data/");
            ExtractInBean inBean= JsonUtils.fromJson(bean,ExtractInBean.class);
            if("200".equals(inBean.getCode())){
                save(file.getId(),inBean,fileId);
                push.sendMsgToClient(new MsgBean("0000","成功",file), Constants.PUSH_CHANNEL_EXTRACT);
            }
            push.sendMsgToClient(new MsgBean("9999","模型计算失败",file), Constants.PUSH_CHANNEL_EXTRACT);
        }catch (Exception e){
            logger.error("报错变量信息异常，id为："+file.getId(),e);
            push.sendMsgToClient(new MsgBean("9999","系统异常",file), Constants.PUSH_CHANNEL_EXTRACT);
            throw new RuntimeException("保存出错");
        }

        return map;
    }

    private void save(Long extractId,ExtractInBean inBean,Long id){
        List<String[]> list= CSVUtil.read(inBean.getPredictResPath());
        Map<String,String[]> data=listToMap(list);
        List<Map<String ,Object>> map = dataExchangeMapper.getContractValue(id);
        List<List<ModelsExtractTargetValue>> lists=new ArrayList<>();
        List<ModelsExtractTargetValue> list1=new ArrayList<>();
        int i=1;
        for(Map<String ,Object> str:map){
            String indexName=(String)str.get("index_name");
            list1.add(new ModelsExtractTargetValue(
                    Integer.valueOf(str.get("id").toString())
                    ,indexName,new BigDecimal(data.get(indexName)[1]),extractId));
            if(i++%1000==0){
                lists.add(list1);
                list1=new ArrayList<>();
            }
        }
        if(list1.size()>0)  lists.add(list1);
        new HttpDataExchangeManager.Save<List<ModelsExtractTargetValue>, ModelsExtractTargetValueMapper>() {
            @Override
            public void insert(List<ModelsExtractTargetValue> info, ModelsExtractTargetValueMapper mapper) {
                mapper.insert(info);
            }
        }.insertBatch(lists,modelsExtractTargetValueMapper);
    }

    private Map<String,String[]> listToMap(List<String[]> list){
        Map<String,String[]> map = new HashMap<>();
        for (String[] str :list){
            map.put(str[0],str);
        }
        return map;
    }
}
