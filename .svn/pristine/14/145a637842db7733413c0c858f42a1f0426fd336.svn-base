package com.ccx.models.util;

import com.ccx.models.model.User;
import com.ccx.models.model.datafile.ModelsDataFile;
import com.ccx.models.model.datafile.ModelsFileInfo;
import com.ccx.models.model.datafile.ModelsFileRowValue;
import com.ccx.models.model.datafile.ModelsFileValue;
import com.ccx.models.service.impl.datafile.CommonFileValue;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import java.io.*;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * @author Created by xzd on 2017/11/21.
 * @Description 文件导入工具类
 */
public class ImportUtils {
    /**
     * 导入csv文件
     * @return
     */
    public CommonFileValue.DataFile importCsvFile(MultipartFile multipartFile, Map<String, Object> params, boolean isMyOwn) throws IOException {
        //return data
        CommonFileValue.DataFile dataFile = new CommonFileValue.DataFile();
        //（一）保存数据文件记录-同时返回文件保存的文件记录id
        ModelsDataFile modelsDataFile = saveDataFile(multipartFile);
        //判断参数是否为空
        if (params.size() == 0) {
            String errCode = EnumSysManage.DATA_FILE_IMPORT_ERR_TYPE_PARAM.getCode();
            String errName = EnumSysManage.DATA_FILE_IMPORT_ERR_TYPE_PARAM.getName();
            //参数为空
            throw new MyRuntimeException(errCode + "|" + errName);
        }
        //数据-未处理
        List<String> dataList = new ArrayList<>();
        //行号
        int rowNumber = 0;
        //默认文件编码
        String codeType = "GBK";
        InputStream inputStream = null;
        BufferedInputStream bis = null;
        //读取文件
        BufferedReader br = null;
        try {
            inputStream = multipartFile.getInputStream();
            //文件编码识别
            bis = new BufferedInputStream(inputStream);
            br = new BufferedReader(new InputStreamReader(inputStream));
            //文件内容读取
            rowNumber = read(dataList, br);
            //文件编码校验
            codeType = getFileCode(bis, params);
            //文件存储
            storageFile(modelsDataFile, multipartFile.getInputStream());
        } finally {
            closeStream(br, bis, inputStream);
        }

        if (dataList != null && dataList.size() > 0) {
            //文件所包含的行数
            modelsDataFile.setSize(rowNumber == 0 ? rowNumber : rowNumber-1);
            modelsDataFile.setCodeType(codeType);
            getDataFileEntity(modelsDataFile, params);

            //存储文件信息
            dataFile.setDataFile(modelsDataFile);

            //数据文件变量值
            dataFile = analysisData(dataList, dataFile, params, isMyOwn);
        }

        return dataFile;
    }

    /**
     * 保存数据文件记录
     * @param multipartFile
     * @return
     */
    public ModelsDataFile saveDataFile(MultipartFile multipartFile){
        //文件原名称
        String filename = multipartFile.getOriginalFilename();
        //文件类型
        String fileType = filename.substring(filename.lastIndexOf(".")+1);

        ModelsDataFile modelsDataFile = new ModelsDataFile();

        modelsDataFile.setName(filename.substring(0, filename.indexOf(".")));
        modelsDataFile.setRealName(filename);
        modelsDataFile.setType(fileType);

        return modelsDataFile;
    }

    /**
     * 文件读取
     * @param dataList
     * @return
     * @throws IOException
     */
    public int read(List<String> dataList, BufferedReader br) {
        //统计多少行
        int rowNumber = 0;
        try {
            //行读取
            String line = "";
            while ((line = br.readLine()) != null) {
                rowNumber++;
                //处理csv文件中是否包含双引号
                if (line.contains("\"") && line.length() > 2) {
                    String dealLine = line.replace("\"","");
                    dataList.add(dealLine);
                } else {
                    dataList.add(line);
                }
            }
        } catch (Exception e){
            e.printStackTrace();
            throw new RuntimeException("文件读取出错");
        }
        return rowNumber;
    }

    /**
     * 文件存储
     * @param modelsDataFile
     * @param bis
     */
    private void storageFile(ModelsDataFile modelsDataFile, InputStream bis){
        //文件名称
        String fileName = modelsDataFile.getName();
        String fileWholeName = "";

        //判断文件是什么格式
        if ("csv".equals(modelsDataFile.getType())) {
            fileWholeName = fileName + "_"+System.currentTimeMillis()%1000+".csv";
        } else if ("txt".equals(modelsDataFile.getType())) {
            fileWholeName = fileName + "_"+System.currentTimeMillis()%1000+ ".txt";
        }
        //文件临时存放路径
        String filePath = PropertiesUtil.getProperty("model_user_fileBasePath") + modelsDataFile.getCreatorName()+"/datafile/"+ fileWholeName;

        modelsDataFile.setFileUrl(filePath);

        //存放csv文件/txt文件
        FileOperate.writeFromInputStream(bis, filePath,true);
    }

    /**
     * 关闭流操作
     * @param in
     */
    private void closeStream(BufferedReader br,InputStream... in){
        try {
            if (br != null) {
                br.close();
            }
            for(InputStream stream:in){
                if(stream != null){
                    stream.close();
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * 获取数据文件实体
     * @param modelsDataFile
     * @param params
     * @return
     */
    private void getDataFileEntity(ModelsDataFile modelsDataFile, Map<String, Object> params){
        modelsDataFile.setName((String) params.get("fileName"));
        modelsDataFile.setFileDelimiter((String) params.get("splitCode"));

        //文件空值替换符
        String nullValue = (String) params.get("nullValue");

        if (nullValue == null || nullValue.isEmpty()) {
            modelsDataFile.setNullValue(null);
        } else {
            modelsDataFile.setNullValue(nullValue);
        }

        modelsDataFile.setTargetName((String) params.get("targetName"));
        modelsDataFile.setIndexName((String) params.get("indexName"));
        modelsDataFile.setDescription((String) params.get("description"));
        modelsDataFile.setCreateDate(new Date());

        //获取当前用户名称
        HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
        User user = (User) request.getSession().getAttribute("risk_crm_user");
        if (null == user) {
            throw new RuntimeException("session中的用户信息没有获取到，不能进行保存操作");
        }

        modelsDataFile.setCreatorName(user.getLoginName());
    }

    /**
     * 分析数据
     * @param importList
     */
    private CommonFileValue.DataFile analysisData(List<String> importList, CommonFileValue.DataFile dataFile,
                Map<String, Object> params, boolean isMyOwn){
        //存储变量值
        Map<String, List<ModelsFileValue>> dataValues = new HashMap<>();
        //存储mark index值
        Map<Integer, List<ModelsFileValue>> dataMarkIndexValues = new ConcurrentHashMap<>();
        //存储mark target值
        Map<Integer, List<ModelsFileValue>> dataMarkTargetValues = new ConcurrentHashMap<>();
        //文件变量信息
        List<ModelsFileInfo> fileInfoList = new ArrayList<>();
        //（二）保存文件信息
        //file value list
        List<ModelsFileRowValue> fileRowValueList = new ArrayList<>();
        //分析完之后的数据集合
        List<ModelsFileValue> fileValueList = new ArrayList<>();
        //存储文件字段集合
        LinkedList<String> linkedList = new LinkedList<>();
        //标记列值
        LinkedList<Integer> linkedMarkList = new LinkedList<>();
        //文件分隔符
        String splitReg = getFileSplitCode(params);

        if (importList == null || importList.size() == 0) {
            throw new RuntimeException("导入文件报错：文件中没有数据！");
        }

        //校验分隔符是否存在文件中
        judgeSplitCodeIsRight(importList, splitReg);

        //处理表头，即文件信息表
        String columnTitle = importList.get(0);

        if (StringUtils.isEmpty(columnTitle)) {
            throw new RuntimeException("导入文件报错：第一行数据为空！");
        }

        if (columnTitle.contains(splitReg)) {
            //judge column is copy
            HashMap<String, Integer> hashMap = new HashMap<>();

            String[] columnTitleArr = columnTitle.split(splitReg);

            for (int j = 0; j < columnTitleArr.length; j++) {
                //列名称
                String columnName = columnTitleArr[j];

                if (StringUtils.isEmpty(columnName)) {
                    throw new RuntimeException("导入文件报错：文件中第"+(j+1)+"列列名为空！");
                }

                if (hashMap.get(columnName) != null) {
                    //列号
                    String columnId = String.valueOf(hashMap.get(columnName));
                    String errCode = EnumSysManage.DATA_FILE_IMPORT_ERR_TYPE_COLUMN.getCode() + "," + columnId + "," + (j+1);
                    String errName = EnumSysManage.DATA_FILE_IMPORT_ERR_TYPE_COLUMN.getName();
                    //列名称有相同值
                    throw new MyRuntimeException(errCode + "|" + errName);
                } else {
                    hashMap.put(columnName, j+1);
                }

                ModelsFileInfo fileInfo = getModelsFileInfo(columnName, j+1);
                //file info list add
                fileInfoList.add(fileInfo);
                //标记index列和target列
                getLinkedMarkList(params, linkedMarkList, columnName, j+1, dataMarkIndexValues, dataMarkTargetValues);
                //column list
                linkedList.add(columnName);
                //获取分组后的变量map
                getFileValueMap(dataValues, columnName);
            }
        }

        //二、处理字段数据
        for (int i = 1; i < importList.size(); i++) {
            //行数据
            String rowVal = importList.get(i);

            if (StringUtils.isEmpty(rowVal)) {
                throw new RuntimeException("导入文件报错：第二行变量值为空");
            }

            //一行数据
            String column = rowVal.replace("\"","");

            if (column.contains(splitReg)) {
                //csv，txt split
                String[] columnArr = column.split(splitReg);

                //judge last column is null
                if (linkedList.size() == columnArr.length) {
                    for (int j = 0; j < columnArr.length; j++) {
                        ModelsFileValue fileValue = new ModelsFileValue();
                        //变量值
                        fileValue.setValue(columnArr[j]);
                        //行号
                        fileValue.setRowNumber(i);
                        fileValueList.add(fileValue);

                        //手动将变量值按照变量分组
                        List<ModelsFileValue> fileValueListGroup = dataValues.get(linkedList.get(j));

                        if (fileValueListGroup != null) {
                            fileValueListGroup.add(fileValue);
                        }
                    }
                } else {
                    String errCode = EnumSysManage.DATA_FILE_IMPORT_ERR_TYPE_ROW_FIRST_NULL.getCode() + "," + i;
                    String errName = EnumSysManage.DATA_FILE_IMPORT_ERR_TYPE_ROW_FIRST_NULL.getName();
                    //最后一个值为空
                    throw new MyRuntimeException(errCode + "|" + errName);
                }
            } else {
                String errCode = EnumSysManage.DATA_FILE_IMPORT_ERR_TYPE_SPLIT_CODE_NOT_MATCH.getCode() + ",1";
                String errName = EnumSysManage.DATA_FILE_IMPORT_ERR_TYPE_SPLIT_CODE_NOT_MATCH.getName();
                throw new MyRuntimeException(errCode + "|" + errName);
            }

            //将变量值以json形式保存
            ModelsFileRowValue rowValue = new ModelsFileRowValue();

            if (column.contains(splitReg)) {
                String[] columnArr = column.split(splitReg);
                rowValue.setRowValue(JsonUtils.toJson(columnArr));
            } else {
                rowValue.setRowValue(JsonUtils.toJson(column));
            }

            //添加一行数据
            fileRowValueList.add(rowValue);
        }

        //存储标记列值
        putMarkValueMap(linkedList, linkedMarkList, dataValues, dataMarkIndexValues, dataMarkTargetValues);

        //外部调用时不需要校验target
        if (isMyOwn) {
            //填写的target name是否在文件中
            if (dataMarkTargetValues == null || dataMarkTargetValues.size() == 0) {
                String errCode = EnumSysManage.DATA_FILE_IMPORT_ERR_TYPE_TARGET_NOT_IN.getCode();
                String errName = EnumSysManage.DATA_FILE_IMPORT_ERR_TYPE_TARGET_NOT_IN.getName();
                throw new MyRuntimeException(errCode + "|" + errName);
            }
        }

        //填写的index name是否在文件中
        if (dataMarkIndexValues == null || dataMarkIndexValues.size() == 0) {
            String errCode = EnumSysManage.DATA_FILE_IMPORT_ERR_TYPE_INDEX_NOT_IN.getCode();
            String errName = EnumSysManage.DATA_FILE_IMPORT_ERR_TYPE_INDEX_NOT_IN.getName();
            throw new MyRuntimeException(errCode + "|" + errName);
        }

        //校验标记列值
        validateMarkIndexColumn(dataMarkIndexValues);
        //外部调用时不需要校验target
        if (isMyOwn) {
            validateMarkTargetColumn(dataMarkTargetValues);
        }
        //存储变量信息
        dataFile.setFileInfoList(getFileInfoList(getRealFileInfoList(fileInfoList, judgeColumnType(dataValues))));
        //存储变量值信息
        dataFile.setFileRowValueList(getFileValueList(fileRowValueList));

        return dataFile;
    }

    /**
     * 判断填写的文件分隔符是否和文件中的分隔符相符
     * @param importList
     * @param splitCode
     */
    public void judgeSplitCodeIsRight(List<String> importList, String splitCode) {
        boolean flag = true;

        //list size
        int size = importList.size();
        if (size < 10) {
            for (String rowVal:importList) {
                if (StringUtils.isEmpty(rowVal)) {
                    throw new RuntimeException("文件报错：某一行没有数据");
                }
                if (!rowVal.contains(splitCode)) {
                    flag = false;
                    break;
                }
            }
        } else {
            for (int i = 0; i < 10; i++) {
                String rowVal = importList.get(i);
                if (StringUtils.isEmpty(importList.get(i))) {
                    throw new RuntimeException("文件报错：某一行没有数据");
                }
                if (!rowVal.contains(splitCode)) {
                    flag = false;
                    break;
                }
            }
        }

        if (!flag) {
            String errCode = EnumSysManage.DATA_FILE_IMPORT_ERR_TYPE_SPLIT_CODE_NOT_MATCH.getCode() + ",1";
            String errName = EnumSysManage.DATA_FILE_IMPORT_ERR_TYPE_SPLIT_CODE_NOT_MATCH.getName();
            //填写的文件分隔符与文件中的不相符
            throw new MyRuntimeException(errCode + "|" + errName);
        }
    }

    /**
     * index和target列加入标记
     * @param params
     * @param linkedMarkList
     * @param columnName
     * @param columnId
     * @param dataMarkIndexValues
     * @param dataMarkTargetValues
     */
    public void getLinkedMarkList(Map<String, Object> params, LinkedList<Integer> linkedMarkList, String columnName, Integer columnId,
            Map<Integer, List<ModelsFileValue>> dataMarkIndexValues, Map<Integer, List<ModelsFileValue>> dataMarkTargetValues){
        //标记index列和target列
        if (columnName.equals(params.get("indexName"))) {
            linkedMarkList.add(1);
            //加入标记map
            getFileValueMarkIndexMap(dataMarkIndexValues, columnId);
        } else if (columnName.equals(params.get("targetName"))) {
            linkedMarkList.add(2);
            //加入标记map
            getFileValueMarkTargetMap(dataMarkTargetValues, columnId);
        } else {
            linkedMarkList.add(0);
        }
    }

    /**
     * 文件中变量信息
     * @param fileInfoList
     * @return
     */
    public List<CommonFileValue.FileInfo> getFileInfoList(List<ModelsFileInfo> fileInfoList){
        //file info list
        List<CommonFileValue.FileInfo> myFileInfoList = new ArrayList<>();

        for(ModelsFileInfo myFileInfo:fileInfoList) {
            CommonFileValue.FileInfo fileInfo = new CommonFileValue.FileInfo();
            fileInfo.setFileInfo(myFileInfo);
            //将文件变量的值放入变量中
            myFileInfoList.add(fileInfo);
        }
        return myFileInfoList;
    }

    /**
     * 获取拼接后的文件变量信息
     * @param fileInfoNameList
     * @param fileInfoTypeList
     * @return
     */
    public List<ModelsFileInfo> getRealFileInfoList(List<ModelsFileInfo> fileInfoNameList, List<ModelsFileInfo> fileInfoTypeList){
        //file info list
        List<ModelsFileInfo> fileInfoList = new ArrayList<>();

        if (fileInfoNameList == null || fileInfoTypeList == null || fileInfoNameList.size() == 0 || fileInfoTypeList.size() == 0) {
            throw new RuntimeException("导入文件报错：存储文件变量名称或变量类型的集合为空");
        }

        if (fileInfoNameList.size() == fileInfoTypeList.size()) {
            for (int i = 0; i < fileInfoNameList.size(); i++) {
                //存储变量名称的file info list
                ModelsFileInfo fileInfoName = fileInfoNameList.get(i);
                //存储变量类型的file info list
                ModelsFileInfo fileInfoType = fileInfoTypeList.get(i);

                fileInfoName.setType(fileInfoType.getType());
                fileInfoName.setColumnType(fileInfoType.getColumnType());
                fileInfoList.add(fileInfoName);
            }
        }
        return fileInfoList;
    }

    /**
     * 文件中变量值信息
     * @param fileValueList
     * @return
     */
    public List<CommonFileValue.FileRowValue> getFileValueList(List<ModelsFileRowValue> fileValueList){
        //file value list
        List<CommonFileValue.FileRowValue> myFileValueList = new ArrayList<>();

        for(ModelsFileRowValue myFileValue:fileValueList) {
            CommonFileValue.FileRowValue fileValue = new CommonFileValue.FileRowValue();
            fileValue.setFileRowValue(myFileValue);
            //将文件变量的值放入变量中
            myFileValueList.add(fileValue);
        }
        return myFileValueList;
    }

    /**
     * 获取文件详情实体
     * @param columnTitle 列名
     * @return
     */
    private ModelsFileInfo getModelsFileInfo(String columnTitle, Integer columnNum){
        //文件详情
        ModelsFileInfo fileInfo = new ModelsFileInfo();

        //判断列名是否符合规范
        if (isMatchColumnName(columnTitle)) {
            fileInfo.setName(columnTitle);
        } else {
            String errCode = EnumSysManage.DATA_FILE_IMPORT_ERR_TYPE_COLUMN.getCode() +"," +columnNum;
            String errName = EnumSysManage.DATA_FILE_IMPORT_ERR_TYPE_COLUMN.getName();
            //列名不符合规范
            throw new MyRuntimeException(errCode + "|" +errName);
        }
        return fileInfo;
    }

    /**
     * //获取分组后的变量map
     * @param columnName
     */
    private void getFileValueMap(Map<String, List<ModelsFileValue>> dataValues, String columnName){
        List<ModelsFileValue> list = null;

        //空处理
        if(dataValues.get(columnName) == null){
            list = new ArrayList<>();
            dataValues.put(columnName, list);
        }
    }

    /**
     * //获取标记的变量id map
     * @param columnId
     */
    private void getFileValueMarkIndexMap(Map<Integer, List<ModelsFileValue>> dataMarkIndexValues, Integer columnId){
        List<ModelsFileValue> list = null;

        //空处理
        if(dataMarkIndexValues.get(columnId) == null){
            list = new ArrayList<>();
            dataMarkIndexValues.put(columnId, list);
        }
    }

    /**
     * //获取标记的变量target map
     * @param columnId
     */
    private void getFileValueMarkTargetMap(Map<Integer, List<ModelsFileValue>> dataMarkTargetValues, Integer columnId){
        List<ModelsFileValue> list = null;

        //空处理
        if(dataMarkTargetValues.get(columnId) == null){
            list = new ArrayList<>();
            dataMarkTargetValues.put(columnId, list);
        }
    }

    /**
     * 存储标记的列值
     * @param linkedList 列id
     * @param linkedMarkList 标记列
     */
    private void putMarkValueMap(LinkedList<String> linkedList, LinkedList<Integer> linkedMarkList,
        Map<String, List<ModelsFileValue>> dataValues, Map<Integer, List<ModelsFileValue>> dataMarkIndexValues,
            Map<Integer, List<ModelsFileValue>> dataMarkTargetValues){
        for (int i = 0; i < linkedList.size(); i++) {
            //列id
            String columnName = linkedList.get(i);
            if (1 == linkedMarkList.get(i)) {
                dataMarkIndexValues.put(i+1, dataValues.get(columnName));
            } else if (2 == linkedMarkList.get(i)) {
                dataMarkTargetValues.put(i+1, dataValues.get(columnName));
            }
        }
    }

    /**
     * 校验index列值是否符合规范
     */
    private void validateMarkIndexColumn(Map<Integer, List<ModelsFileValue>> dataMarkIndexValues){
        //循环遍历参数map
        Iterator it = dataMarkIndexValues.entrySet().iterator();

        while(it.hasNext()) {
            Map.Entry<Integer, List<ModelsFileValue>> columnMap = (Map.Entry<Integer, List<ModelsFileValue>>) it.next();
            //第几列
            Integer markColumnNumber = columnMap.getKey();
            List<ModelsFileValue> columnValueList = columnMap.getValue();

            Map<String, Integer> map = new HashMap<>();

            for (int i = 0; i < columnValueList.size(); i++) {
                ModelsFileValue fileValue = columnValueList.get(i);
                //变量值
                String columnValue = String.valueOf(fileValue.getValue());
                //空处理
                if (StringUtils.isEmpty(columnValue)) {
                    String errCode = EnumSysManage.DATA_FILE_IMPORT_ERR_TYPE_NOT_NUMBER.getCode() + ",1," + (i+2) + "," + markColumnNumber;
                    String errName = EnumSysManage.DATA_FILE_IMPORT_ERR_TYPE_NOT_NUMBER.getName();
                    //index列为空
                    throw new MyRuntimeException(errCode + "|" +errName);
                } else {
                    if (map.get(columnValue) != null) {
                        String errCode =
                            EnumSysManage.DATA_FILE_IMPORT_ERR_TYPE_NOT_NUMBER.getCode() + ",2," + (i+2) + ","+ map.get(columnValue) + "," + markColumnNumber;
                        String errName = EnumSysManage.DATA_FILE_IMPORT_ERR_TYPE_NOT_NUMBER.getName();
                        //index列中有重复值
                        throw new MyRuntimeException(errCode + "|" +errName);
                    } else {
                        map.put(columnValue, i+2);
                    }
                }
            }
        }
    }

    /**
     * 校验target列值是否符合规范
     */
    private void validateMarkTargetColumn(Map<Integer, List<ModelsFileValue>> dataMarkTargetValues){
        //循环遍历参数map
        Iterator it = dataMarkTargetValues.entrySet().iterator();

        while(it.hasNext()) {
            Map.Entry<Integer, List<ModelsFileValue>> columnMap = (Map.Entry<Integer, List<ModelsFileValue>>) it.next();
            //第几列
            Integer markColumnNumber = columnMap.getKey();
            List<ModelsFileValue> columnValueList = columnMap.getValue();

            for (int i = 0; i < columnValueList.size(); i++) {
                ModelsFileValue fileValue = columnValueList.get(i);
                //变量值
                String columnValue = String.valueOf(fileValue.getValue());
                //空处理
                if (StringUtils.isEmpty(columnValue)) {
                    String errCode = EnumSysManage.DATA_FILE_IMPORT_ERR_TYPE_NOT_NUMBER.getCode() + ",1," + (i+2) + "," + markColumnNumber;
                    String errName = EnumSysManage.DATA_FILE_IMPORT_ERR_TYPE_NOT_NUMBER.getName();
                    //target列有空值
                    throw new MyRuntimeException(errCode + "|" +errName);
                } else {
                    if (!"0".equals(columnValue) && !"1".equals(columnValue)) {
                        String errCode = EnumSysManage.DATA_FILE_IMPORT_ERR_TYPE_NOT_NUMBER.getCode() + ",3," + (i+2) + "," + markColumnNumber;
                        String errName = EnumSysManage.DATA_FILE_IMPORT_ERR_TYPE_NOT_NUMBER.getName();
                        //target列有0和1之外的值
                        throw new MyRuntimeException(errCode + "|" +errName);
                    }
                }
            }
        }
    }

    /**
     * 判断变量的类型：连续/离散
     * @param dataValues
     * @return
     */
    private List<ModelsFileInfo> judgeColumnType(Map<String, List<ModelsFileValue>> dataValues){
        //file info list
        List<ModelsFileInfo> fileInfoList = new ArrayList<>();
        //循环遍历参数map
        Iterator it = dataValues.entrySet().iterator();

        while(it.hasNext()) {
            Map.Entry<String, List<ModelsFileValue>> columnMap = (Map.Entry<String, List<ModelsFileValue>>) it.next();
            List<ModelsFileValue> columnValueList = columnMap.getValue();

            Map<String, Integer> map = new HashMap<>();

            //离散/连续
            for (ModelsFileValue fileValue:columnValueList) {
                //变量值
                String columnValue = String.valueOf(fileValue.getValue());
                if (StringUtils.isEmpty(columnValue)) {
                    continue;
                }
                if (map.get(columnValue) != null) {
                    map.put(columnValue, map.get(columnValue) + 1);
                } else {
                    map.put(columnValue, 1);
                }
            }

            //数字型变量或字符型变量
            boolean isDigital = true;

            for (ModelsFileValue fileValue:columnValueList) {
                //变量值
                String columnValue = String.valueOf(fileValue.getValue());
                if (StringUtils.isEmpty(columnValue)) {
                    continue;
                }
                if (!isDecimal(columnValue)) {
                    isDigital = false;
                    break;
                }
            }

            ModelsFileInfo fileInfo = new ModelsFileInfo();

            //连续/离散，不同的数字不超过10个就是离散型的，反之就是连续型的
            if (map.size() <= 10) {
                fileInfo.setType(0);
            } else {
                fileInfo.setType(1);
            }

            if (isDigital) {
                //数字型变量
                fileInfo.setColumnType(0);
            } else {
                //字符型变量
                fileInfo.setColumnType(1);
            }
            fileInfoList.add(fileInfo);
        }
        return fileInfoList;
    }

    /**
     * 文件编码校验
     * @param params
     * @param bis
     */
    public String getFileCode(BufferedInputStream bis, Map<String, Object> params){
        //校验后的codeType
        String codeType = judgeFileEncode(bis);
        //填写的文件编码
        String fileCode = (String) params.get("fileCode");
        if (!"UTF-8".equalsIgnoreCase(fileCode) && !"GBK".equalsIgnoreCase(fileCode)) {
            if (!codeType.equals(fileCode)) {
                String errCode = EnumSysManage.DATA_FILE_IMPORT_ERR_TYPE_FILE_CODE.getCode();
                String errName = EnumSysManage.DATA_FILE_IMPORT_ERR_TYPE_FILE_CODE.getName();
                //文件编码不一致
                throw new MyRuntimeException(errCode + "|" +errName);
            }
        }
        return codeType;
    }

    /**
     * 判断文件的编码格式
     * @param bis
     * @return 文件编码格式
     */
    private String judgeFileEncode(BufferedInputStream bis){
        int p = 0;
        try {
            p = (bis.read() << 8) + bis.read();
        } catch (IOException e) {
            e.printStackTrace();
        }
        String code = null;
        if (p != 0) {
            //其中的 0xefbb、0xfffe、0xfeff、0x5c75这些都是这个文件的前面两个字节的16进制数
            switch (p) {
                case 0xefbb:
                    code = "UTF-8";
                    break;
                case 0xfffe:
                    code = "Unicode";
                    break;
                case 0xfeff:
                    code = "UTF-16BE";
                    break;
                case 0x5c75:
                    code = "ANSI|ASCII" ;
                    break ;
                default:
                    code = "GBK";
            }
        }
        return code;
    }

    /**
     * 校验并获取文件分隔符
     * @param params
     * @return
     */
    public String getFileSplitCode(Map<String, Object> params){
        //文件分隔符
        String splitReg = "";
        String splitCode = (String) params.get("splitCode");

        if (splitCode.isEmpty()) {
            throw new RuntimeException("文件分隔符为空！");
        } else {
            //判断是中文符号还是英文符号
            if (isChineseSymbol(splitCode)) {
                String errCode = EnumSysManage.DATA_FILE_IMPORT_ERR_TYPE_SPLIT_CODE.getCode();
                String errName = EnumSysManage.DATA_FILE_IMPORT_ERR_TYPE_SPLIT_CODE.getName();
                //文件分隔符为中文
                throw new MyRuntimeException(errCode + "|" +errName);
            } else {
                splitReg = splitCode;
            }
        }
        return splitReg;
    }

    /**
     * 是否是中文符号
     * HALFWIDTH_AND_FULLWIDTH_FORMS 判断中文的，号
     * GENERAL_PUNCTUATION 判断中文的"号
     * CJK_SYMBOLS_AND_PUNCTUATION 判断中文的。号
     * @param splitCode 分隔符
     * @return
     */
    private static boolean isChineseSymbol(String splitCode) {
        Character.UnicodeBlock ub = Character.UnicodeBlock.of(splitCode.charAt(0));

        if (ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS
                || ub == Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS
                || ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A
                || ub == Character.UnicodeBlock.GENERAL_PUNCTUATION
                || ub == Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION
                || ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS) {
            return true;
        }
        return false;
    }

    /**
     * 列名是否符合规范-英文，数字，下划线，且不能是数字开头，不能含有运算符如+-*等
     * @param param
     * @return
     */
    private boolean isMatchColumnName(String param){
        return isMatch("^[A-Za-z_][A-Za-z_0-9]{0,100}$", param);
    }

    /**
     * 是否为实数
     * @param param
     * @return
     */
    private boolean isDecimal(String param){
        return isMatch("0|^[+-]?\\d+(\\.\\d+)?$", param);
    }

    /**
     * 正则判断是否为整数和小数
     * @param regex
     * @param param
     * @return
     */
    private static boolean isMatch(String regex, String param){
        if (param == null || param.trim().equals("")) {
            return false;
        }
        Pattern pattern = Pattern.compile(regex);
        Matcher isNum = pattern.matcher(param);
        return isNum.matches();
    }

}
