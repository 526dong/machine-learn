package com.ccx.models.program;

import com.ccx.models.api.ModelsProgramApi;
import com.ccx.models.api.dataexchange.PutOutExchangeService;
import com.ccx.models.api.datafile.ModelsDataFileApi;
import com.ccx.models.api.datafile.ModelsFileInfoApi;
import com.ccx.models.base.BaseController;
import com.ccx.models.model.ModelsArithmetic;
import com.ccx.models.model.ModelsProgram;
import com.ccx.models.model.Role;
import com.ccx.models.model.User;
import com.ccx.models.model.datafile.ModelsDataFile;
import com.ccx.models.model.datafile.ModelsFileInfo;
import com.ccx.models.util.ControllerUtil;
import com.ccx.models.util.JsonResult;
import com.ccx.models.util.LockUtils;
import com.ccx.models.util.UsedUtil;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.locks.Lock;

@Controller	
@RequestMapping("/program")
public class ProgramController extends BaseController {

	private Logger log = LogManager.getLogger(ProgramController.class);
		
	@Autowired	
	private ModelsProgramApi modelsProgramService;

	@Autowired
	private ModelsDataFileApi modelsDataFileService;

	@Autowired
	private ModelsFileInfoApi modelsFileInfoService;

	@Autowired
	private PutOutExchangeService putOutExchangeService;

	/*	
	 * @author zhaotm 	
	 * @description	
	 * @date	
	*/	
	@RequestMapping(value="/index", method=RequestMethod.GET)
	public ModelAndView modelsProgramIndex(HttpServletRequest request) {	
		ModelAndView mnv = new ModelAndView("program/programIndex");
		return mnv;	
	}

	/*
	 * @author zhaotm
	 * @description
	 * @date
	*/
	@RequestMapping(value="/indexList", method=RequestMethod.POST)
	@ResponseBody
	public JsonResult indexList(HttpServletRequest request) {
		Map<String, Object> paramsMap = ControllerUtil.requestMap(request);
		try {
			//分页
			PageInfo<ModelsProgram> pages = new PageInfo<>();
			PageHelper.startPage(getPageNum(), getPageSize());

			//角色
			String roleType = ControllerUtil.getRoleType();
			paramsMap.put("roleType",roleType);
			pages = modelsProgramService.getPageList(paramsMap);
			return JsonResult.ok(pages);
		} catch (Exception e) {
			log.error("项目列表失败：", e);
			return JsonResult.error(null);
		}
	}

	/**
	 * @Description: 跳转新增页面
	 * @Author: wxn
	 * @Date: 2017/12/8 10:34:36
	 * @Param:
	 * @Return
	 */
	@RequestMapping(value="/toAddProgramPage", method=RequestMethod.GET)
	public ModelAndView toAddProgramPage(Integer id,HttpServletRequest request) {
		ModelAndView mnv = new ModelAndView("program/programAdd");
		try {
			List<ModelsArithmetic> arithmeticList = modelsProgramService.selectArithmeticList();
			List<ModelsDataFile> fileList = modelsDataFileService.getList();
			mnv.addObject("arithmeticList", arithmeticList);
			mnv.addObject("fileList", fileList);
		} catch (Exception e){
			log.error("项目新增失败：", e);
		}
		return mnv;
	}

	/**
	 * @Description: 跳转编辑页面
	 * @Author: wxn
	 * @Date: 2017/12/8 10:34:36
	 * @Param:
	 * @Return
	 */
	@RequestMapping(value="/toEditProgramPage", method=RequestMethod.GET)
	public ModelAndView toEditProgramPage(Integer id) {
		ModelAndView mnv = new ModelAndView("program/programEdit");

		try {
			ModelsProgram program = modelsProgramService.getById(id);
			mnv.addObject("program", program);
			List<ModelsArithmetic> arithmeticList = modelsProgramService.selectArithmeticList();
			List<ModelsDataFile> fileList = modelsDataFileService.getList();

			mnv.addObject("arithmeticList", arithmeticList);
			mnv.addObject("fileList", fileList);

		} catch (Exception e){
			log.error("项目编辑失败：", e);
		}	
		return mnv;	
	}

	/*
     * @author zhaotm
     * @description
     * @date
    */
	@RequestMapping(value="/dataFileInfoList", method=RequestMethod.POST)
	@ResponseBody
	public JsonResult dataFileInfoList(Integer fileId) {

		try {
			List<ModelsFileInfo> infoList = modelsFileInfoService.selectByFileId(fileId);
			return JsonResult.ok(infoList);
		} catch (Exception e) {
			log.error("数据列表失败：", e);
			return JsonResult.error(null);
		}
	}

	/**
	 * @Description:新增项目
	 * @Author: wxn
	 * @Date: 2017/12/8 12:28:22
	 * @Param:
	 * @Return
	 */
	@RequestMapping(value="/addProgramSave", method=RequestMethod.POST)
	@ResponseBody
	public JsonResult addProgramSave(final ModelsProgram model,HttpServletRequest request) {
		if(null != model){
			Lock lock = LockUtils.getLock(model.getName());
			lock.lock();
			try {
				//由于表中Creator字段关系着以后超管与普通管理员不同权限的访问，所以必须保证成功插入数据的同时Creator字段必不能为空
				User user = ControllerUtil.getUser();
				if(null != user){
					//根据项目名称查询数据库中的已存在的项目条数
					List<ModelsProgram> modelsProgramList = modelsProgramService.getListByName(model.getName());
					if(null != modelsProgramList && !modelsProgramList.isEmpty()){
						log.error("项目保存/开始失败，失败原因=====数据库中已存在该项目名称");
						return JsonResult.error("999");
					}
					model.setCreator(user.getLoginName());
					modelsProgramService.save(model);
					new Thread(()->putOutExchangeService.sendTOModel(model,((User) request.getSession().getAttribute("risk_crm_user")).getLoginName())).start();
					return JsonResult.ok(null);
				}else{
					log.error("项目保存/开始失败，失败原因=====session中的用户信息没有获取到");
					return JsonResult.error(null);
				}
			} catch (Exception e) {
				log.error("项目保存/开始失败：", e);
				if(e instanceof DuplicateKeyException){
					return JsonResult.error("999");
				}
				return JsonResult.error(null);
			}finally {
				lock.unlock();
			}
		}else{
			log.error("项目保存/开始失败，失败原因=====传参错误");
			return JsonResult.error(null);
		}
	}

	/*	
	 * @author zhaotm 	
	 * @description	
	 * @date	
	*/	
	@RequestMapping(value="/addOrEditSave", method=RequestMethod.POST)
	@ResponseBody	
	public JsonResult modelsProgramAddOrEditSave(final ModelsProgram model,HttpServletRequest request) {
		if(null != model){
			Lock lock = LockUtils.getLock(model.getName());
			lock.lock();
			try {
				//由于表中Creator字段关系着以后超管与普通管理员不同权限的访问，所以必须保证成功插入数据的同时Creator字段必不能为空
				User user = ControllerUtil.getUser();
				if(null != user){
					//根据项目名称查询数据库中的已存在的项目条数
					List<ModelsProgram> modelsProgramList = modelsProgramService.getListByName(model.getName());
					List<ModelsProgram> modelsProgramList2 = new ArrayList<ModelsProgram>();
					if(null != modelsProgramList && !modelsProgramList.isEmpty()){
						for (int i=0;i<modelsProgramList.size();i++){
							ModelsProgram modelsProgram = modelsProgramList.get(i);
							if(modelsProgram.getId()!=model.getId()){
								modelsProgramList2.add(modelsProgram);
							}
						}
						if(null != modelsProgramList2 && !modelsProgramList2.isEmpty()){
							log.error("项目保存/开始失败，失败原因=====数据库中已存在该项目名称");
							return JsonResult.error("999");
						}
					}
					model.setCreator(user.getLoginName());
					modelsProgramService.save(model);
                    new Thread(()->putOutExchangeService.sendTOModel(model,((User) request.getSession().getAttribute("risk_crm_user")).getLoginName())).start();

                    return JsonResult.ok(null);
				}else{
					log.error("项目保存/开始失败，失败原因=====session中的用户信息没有获取到");
					return JsonResult.error(null);
				}
			} catch (Exception e) {
				log.error("项目保存/开始失败：", e);
				if(e instanceof DuplicateKeyException){
					return JsonResult.error("999");
				}
				return JsonResult.error(null);
			}finally {
				lock.unlock();
			}
		}else{
			log.error("项目保存/开始失败，失败原因=====传参错误");
			return JsonResult.error(null);
		}
	}



	/*
	 * @author zhaotm
	 * @description
	 * @date
	*/
	@RequestMapping(value="/del", method=RequestMethod.POST)
	@ResponseBody
	public JsonResult modelsProgramDel(Integer id) {
		try {
			modelsProgramService.deleteById(id);
			return JsonResult.ok(null);
		} catch (Exception e) {
			log.error("项目删除失败：", e);
			return JsonResult.error(null);
		}
	}
}	
