package com.ccx.models.service.impl.datafile;

import com.ccx.models.api.datafile.ModelsDataFileApi;
import com.ccx.models.mapper.datafile.ModelsDataFileMapper;
import com.ccx.models.mapper.datafile.ModelsFileInfoMapper;
import com.ccx.models.mapper.datafile.ModelsFileRowValueMapper;
import com.ccx.models.mapper.datafile.ModelsFileValueMapper;
import com.ccx.models.model.User;
import com.ccx.models.model.datafile.ModelsDataFile;
import com.ccx.models.model.datafile.ModelsFileInfo;
import com.ccx.models.model.datafile.ModelsFileRowValue;
import com.ccx.models.model.datafile.ModelsFileValue;
import com.ccx.models.util.*;
import com.github.pagehelper.PageInfo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import java.io.*;
import java.math.BigDecimal;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Service("modelsDataFileApi")
public class ModelsDataFileServiceImpl implements ModelsDataFileApi {
	@Autowired
    private ModelsDataFileMapper modelsDataFileMapper;

	@Autowired
	private ModelsFileInfoMapper modelsFileInfoMapper;

	@Autowired
	private ModelsFileRowValueMapper modelsFileRowValueMapper;

	//主键获取
	@Override	
	public ModelsDataFile getById(Integer id) {
		return modelsDataFileMapper.selectByPrimaryKey(id);	
	}	
		
	//获取无参list	
	@Override	
	public List<ModelsDataFile> getList(Map<String, Object> params) {
		return modelsDataFileMapper.getListByParams(params);
	}	
		
	//获取有参数list	
	@Override	
	public List<ModelsDataFile> getList() {
		return modelsDataFileMapper.getList();
	}

	//获取带分页list
	@Override	
	public PageInfo<ModelsDataFile> getPageList(Map<String, Object> paramMap) {
		List<ModelsDataFile> dataFileList = modelsDataFileMapper.selectPageList(paramMap);
		PageInfo<ModelsDataFile> pageInfo = new PageInfo<>(dataFileList);
		return pageInfo;
	}	
		
	//通过条件获取	
	@Override	
	public ModelsDataFile getByModel(ModelsDataFile model) {	
		return null;	
	}	
	
	//保存对象	
	@Override	
	public void save(MultipartFile multipartFile, Map<String, Object> params) {
		try {
			//导入工具类
			ImportUtils importUtils = new ImportUtils();
			//分析数据文件，并保存到数据库
			saveDataFile(importUtils.importCsvFile(multipartFile, params), params);
		} catch (IOException e) {
			e.printStackTrace();
			throw new MyRuntimeException("文件保存出错");
		}
	}

	/**
	 * 保存文件信息、文件变量信息、文件变量值信息
	 * @param dataFile
	 */
	public void saveDataFile(CommonFileValue.DataFile dataFile, final Map<String, Object> params){
		//1、文件信息
		ModelsDataFile myDataFile = dataFile.getDataFile();
		//返回保存id
		modelsDataFileMapper.insert(myDataFile);
		//刚插入的文件id
		Integer dataFileId = myDataFile.getId();

		//2、文件中变量信息
		List<ModelsFileInfo> fileInfoList = getFileInfoList(dataFile.getFileInfoList(), dataFileId);

		if (fileInfoList.size() > 0) {
			modelsFileInfoMapper.batchInsert(fileInfoList);
		} else {
			throw new MyRuntimeException("文件中没有数据");
		}
		//3、文件中变量值信息
		List<ModelsFileRowValue> fileValueList = getFileValueList(dataFile.getFileRowValueList());

		if (fileValueList.size() > 0) {
			//（三）保存文件变量
			//批量保存数据文件中的变量
			new Thread(new Runnable() {
				@Override
				public void run() {
					batchInsertDataValue(fileValueList, dataFileId, params);
				}
			}).start();
		} else {
			throw new MyRuntimeException("文件中没有数据");
		}
	}

	/**
	 * 获取文件变量信息
	 * @param fileInfoList
	 * @return
	 */
	public List<ModelsFileInfo> getFileInfoList(List<CommonFileValue.FileInfo> fileInfoList, Integer dataFileId){
		//file info list
		List<ModelsFileInfo> myFileInfoList = new ArrayList<>();

		for (CommonFileValue.FileInfo fileInfo:fileInfoList) {
			ModelsFileInfo myFileInfo = fileInfo.getFileInfo();
			myFileInfo.setFileId(dataFileId);
			myFileInfoList.add(myFileInfo);
		}

		return myFileInfoList;
	}

	/**
	 * 获取文件变量值信息
	 * @param rowValueList
	 * @return
	 */
	public List<ModelsFileRowValue> getFileValueList(List<CommonFileValue.FileRowValue> rowValueList){
		//file value list
		List<ModelsFileRowValue> fileValueList = new ArrayList<>();

		for (CommonFileValue.FileRowValue rowValue:rowValueList) {
			fileValueList.add(rowValue.getFileRowValue());
		}

		return fileValueList;
	}

	/**
	 * 批量保存数据文件中的变量
	 * @param list
	 */
	public void batchInsertDataValue(List<ModelsFileRowValue> list, Integer dataFileId, Map<String, Object> params){
		//当前用户名称
		String currentUserName = "";
		if (params != null && params.size() > 0 && params.get("currentUserName") != null) {
			currentUserName = (String) params.get("currentUserName");
		}

		//1、分页数据信息-批量处理
		//总记录数
		int totalSize = list.size();
		//每页N条
		int pageSize = 1000;
		//共N页
		int totalPage = (totalSize / pageSize) == 0 ? 1 : (totalSize / pageSize);
		//余数
		int remain = totalSize % pageSize;

		if (totalSize < pageSize) {
			pageSize = list.size();
		} else {
			if (remain > 0) {
				totalPage += 1;
			}
		}

		//2、组装新数据
		final List<ModelsFileRowValue> newList = new ArrayList<>();
		for (int pageNum = 1; pageNum < totalPage + 1; pageNum++) {
			//开始页
			int starNum = (pageNum - 1) * pageSize;
			//结束页
			int endNum = pageNum * pageSize > totalSize ? (totalSize) : pageNum * pageSize;

			//不能整除，处理余数
			if (pageNum == totalPage && remain > 0) {
				endNum = starNum + remain;
			}

			for (int i = starNum; i < endNum; i++) {
				ModelsFileRowValue rowValue = list.get(i);

				rowValue.setFileId(dataFileId);
				rowValue.setCreateDate(new Date());
				rowValue.setCreatorName(currentUserName);

				newList.add(rowValue);
			}

			modelsFileRowValueMapper.batchInsert(newList);

			//移出当前保存的数据
			newList.clear();
		}
	}
	
	//更新对象	
	@Override	
	public int update(ModelsDataFile model) {	
		return modelsDataFileMapper.updateByPrimaryKey(model);	
	}	
		
	//删除对象	
	@Override	
	public int deleteById(Integer id) {	
		return modelsDataFileMapper.deleteByPrimaryKey(id);	
	}	
		
	//其他查询	
	@Override	
	public Map<String, Object> getOther() {	
		return null;	
	}	
}	
